<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.emiary.dao.DiaryDAO">

	<!-- 일기저장 -->
	<insert id="write" parameterType="Diaries">
		insert into  diaries (
		diary_id
		, email
		, content
		, content_notag
		, emotionscore
		, keyword
		, wordsforai
		, created_at
		)
		values (
		diaries_seq.nextval
		, #{email}
		, #{content}
		, #{content_notag}
		, #{emotionscore}
		, #{keyword}
		, #{wordsforai}
		, #{created_at}
		)
	</insert>

	<select id="readDiary" parameterType="Map" resultType="Diaries">
		select diary_id, content, to_char(created_at, 'FMyyyy-mm-dd') as created_at, keyword, wordsforai
		from diaries
		where email = #{email}
		  and created_at = #{created_at}
	</select>

	<update id="updateAIaddr" parameterType="Diaries">
		update diaries
		set AIIMG = #{aiIMG}
		where diary_id = #{diary_id}
	</update>

	<select id="checkDiary" parameterType="String" resultType="Diaries">
		select to_char(created_at, 'FMyyyymmdd') as created_at, emotionscore
		from diaries
		where email = #{username}
	</select>

	<select id="modalCheck" parameterType="Map" resultType="int">
		select count(*)
		from diaries
		where created_at = #{created_at}
		and email = #{email}
	</select>

	<delete id="deleteDiary" parameterType="Map">
		delete diaries
		where email = #{email}
		and created_at = #{created_at}
	</delete>

	<select id="emptyDiaryCheck" parameterType="Map" resultType="int"
	>
		select count(*)
		from diaries
		where created_at = #{dayString} and email = #{username}
	</select>

	<select id="writtenDiaryCheck" parameterType="Map" resultType="Diaries">
		select content, to_char(created_at, 'yyyy-mm-dd') as created_at
		from diaries
		where created_at = #{dayString}
		  and email = #{username}
	</select>

	<select id="findingContent" parameterType="map" resultType="Diaries">
		select to_char(created_at, 'yyyy-mm-dd') as created_at, substr(content_notag, 0, 15) || '.....' as content_notag
		from diaries
		where email = #{username} and content like '%'||#{searchInput}||'%'
	</select>

	<select id="heartStatus" parameterType="map" resultType="int">
		select count(*)
		from visited
		where diary_id = #{diaryId} and heart = 'Y'
	</select>

	<insert id="inputComment" parameterType="map">
		insert into reply(reply_id, diary_id, replyContent, writer_email)
		values (reply_seq.nextval, #{diaryId}, #{comment}, #{username})
	</insert>

	<select id="getReply" parameterType="String" resultType="Reply">
		select replyContent, writer_email, to_char(created_at_reply, 'yyyy-mm-dd HH24:MI:SS') as created_at_reply
		from reply
		where diary_id = #{diaryId}
		order by created_at_reply desc
	</select>

	<select id="getNickName" parameterType="String" resultType="String">
		select nickname
		from member
		where email = #{writerEmail}
	</select>

	<select id="getReplyAlarm" parameterType="map" resultType="ReplyAlarm">
		select to_char(created_at, 'FMyyyy-mm-dd') as created_at, count(*) as countPerDay
		from diaries join reply
		using (diary_id)
		where email = #{username} and to_char(created_at, 'FMyyyy-mm') = #{yearMonth} and writer_email != #{username} and viewed = 0
		group by created_at
	</select>

	<update id="readComment" parameterType="int">
		update reply
		set viewed = 1
		where diary_id = #{diaryId}
	</update>
</mapper>

